name: Build and Deploy Demo App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write    
  packages: write    

env:
  IMAGE_REPO: ghcr.io/arthur-16/argodemo
  CHART_PATH: demo
  VALUES_DEV_FILE: demo/values-dev.yaml
  VALUES_STAGING_FILE: demo/values-staging.yaml

concurrency:
  group: build-and-pin-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      short-sha: ${{ steps.meta.outputs.short-sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive tags and metadata
        id: meta
        run: |
          SHORT_SHA="$(git rev-parse --short=12 HEAD)"
          TIMESTAMP="$(date +%Y%m%d%H%M%S)"
          echo "short-sha=${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          echo "timestamp=${TIMESTAMP}" >> "$GITHUB_OUTPUT"
          echo "tags=${{ env.IMAGE_REPO }}:${SHORT_SHA},${{ env.IMAGE_REPO }}:dev,${{ env.IMAGE_REPO }}:latest" >> "$GITHUB_OUTPUT"

      - name: Build & push multi-arch image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./app/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            BUILD_VERSION=${{ steps.meta.outputs.short-sha }}
            BUILD_TIME=${{ steps.meta.outputs.timestamp }}
            GIT_SHA=${{ github.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.timestamp }}

      - name: Show build results
        run: |
          echo "üöÄ Build completed successfully!"
          echo "Image: ${{ env.IMAGE_REPO }}"
          echo "Digest: ${{ steps.build.outputs.digest }}"
          echo "Short SHA: ${{ steps.meta.outputs.short-sha }}"

  update-dev:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install yq
        uses: mikefarah/yq@v4.44.3

      - name: Debug file structure
        run: |
          echo "üìÅ Current directory structure:"
          ls -la
          echo "üìÅ Demo directory:"
          ls -la demo/
          echo "üìä Values file info:"
          if [[ -f "${{ env.VALUES_DEV_FILE }}" ]]; then
            echo "‚úÖ File exists: ${{ env.VALUES_DEV_FILE }}"
            echo "File size: $(wc -c < "${{ env.VALUES_DEV_FILE }}") bytes"
            echo "First 5 lines:"
            head -5 "${{ env.VALUES_DEV_FILE }}"
          else
            echo "‚ùå File not found: ${{ env.VALUES_DEV_FILE }}"
            exit 1
          fi

      - name: Validate YAML syntax
        run: |
          echo "üß™ Testing YAML syntax..."
          yq eval '.' "${{ env.VALUES_DEV_FILE }}" > /dev/null
          echo "‚úÖ YAML syntax is valid"

      - name: Pin digest in dev values
        run: |
          echo "üîí Pinning image digest in development environment"
          echo "Repository: ${{ env.IMAGE_REPO }}"
          echo "Digest: ${{ needs.build.outputs.digest }}"
          echo "Short SHA: ${{ needs.build.outputs.short-sha }}"
          
          # Update image configuration (safe from special characters)
          yq -i '.image.repository = "${{ env.IMAGE_REPO }}"' "${{ env.VALUES_DEV_FILE }}"
          yq -i '.image.digest = "${{ needs.build.outputs.digest }}"' "${{ env.VALUES_DEV_FILE }}"
          
          # Update version (using safe string without special characters)
          yq -i '.demo.version = "dev-v1.1-${{ needs.build.outputs.short-sha }}"' "${{ env.VALUES_DEV_FILE }}"
          
          # Update message using a safer approach (no parentheses or emoji in CI)
          yq -i '.demo.message = "GitOps Demo - Development Build ${{ needs.build.outputs.short-sha }}"' "${{ env.VALUES_DEV_FILE }}"
          
          echo "‚úÖ Updated values file:"
          echo "--- ${{ env.VALUES_DEV_FILE }} ---"
          yq eval '.image' "${{ env.VALUES_DEV_FILE }}"
          yq eval '.demo' "${{ env.VALUES_DEV_FILE }}"

      - name: Commit and push changes
        run: |
          git config user.name "ci-bot"
          git config user.email "ci@arthur-16.github.io"
          
          # Check if there are changes to commit
          if git diff --quiet "${{ env.VALUES_DEV_FILE }}"; then
            echo "‚ÑπÔ∏è No changes to commit"
            exit 0
          fi
          
          echo "üìù Changes made:"
          git diff "${{ env.VALUES_DEV_FILE }}"
          
          git add "${{ env.VALUES_DEV_FILE }}"
          git commit -m "üîí Pin dev image to ${{ needs.build.outputs.short-sha }}

          Image: ${{ env.IMAGE_REPO }}@${{ needs.build.outputs.digest }}
          
          This commit was automatically generated by CI to pin the
          development environment to an immutable image digest."
          
          # Push with retry logic
          for i in {1..3}; do
            if git push origin main; then
              echo "‚úÖ Successfully pushed changes"
              break
            else
              echo "‚ö†Ô∏è Push failed, attempt $i/3"
              if [[ $i -eq 3 ]]; then
                echo "‚ùå Failed to push after 3 attempts"
                exit 1
              fi
              sleep 2
              git pull --rebase origin main
            fi
          done

  promote-to-staging:
    needs: [build, update-dev]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install yq
        uses: mikefarah/yq@v4.44.3

      - name: Promote to staging
        run: |
          echo "üéØ Promoting to staging environment"
          
          # Pull latest changes from dev update
          git pull origin main
          
          # Verify staging values file exists
          if [[ ! -f "${{ env.VALUES_STAGING_FILE }}" ]]; then
            echo "‚ùå Staging values file not found: ${{ env.VALUES_STAGING_FILE }}"
            exit 1
          fi
          
          # Update staging with the same digest as dev
          yq -i '.image.repository = "${{ env.IMAGE_REPO }}"' "${{ env.VALUES_STAGING_FILE }}"
          yq -i '.image.digest = "${{ needs.build.outputs.digest }}"' "${{ env.VALUES_STAGING_FILE }}"
          
          # Update staging version info (safe strings only)
          yq -i '.demo.version = "staging-v1.1-${{ needs.build.outputs.short-sha }}"' "${{ env.VALUES_STAGING_FILE }}"
          yq -i '.demo.message = "GitOps Demo - Staging Build ${{ needs.build.outputs.short-sha }}"' "${{ env.VALUES_STAGING_FILE }}"
          
          echo "‚úÖ Updated staging values file:"
          yq eval '.image' "${{ env.VALUES_STAGING_FILE }}"
          yq eval '.demo' "${{ env.VALUES_STAGING_FILE }}"

      - name: Commit staging promotion
        run: |
          git config user.name "ci-bot"
          git config user.email "ci@arthur-16.github.io"
          
          if git diff --quiet "${{ env.VALUES_STAGING_FILE }}"; then
            echo "‚ÑπÔ∏è No staging changes to commit"
            exit 0
          fi
          
          git add "${{ env.VALUES_STAGING_FILE }}"
          git commit -m "üéØ Promote ${{ needs.build.outputs.short-sha }} to staging

          Image: ${{ env.IMAGE_REPO }}@${{ needs.build.outputs.digest }}
          
          Promoting the same immutable image digest from development
          to staging environment after successful testing."
          
          git push origin main

  notify:
    needs: [build, update-dev, promote-to-staging]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Pipeline Summary
        run: |
          echo "üìä Pipeline Results:"
          echo "  üî® Build: ${{ needs.build.result }}"
          echo "  üöÄ Dev Update: ${{ needs.update-dev.result }}"
          echo "  üéØ Staging Promotion: ${{ needs.promote-to-staging.result }}"
          echo "  üì¶ Image: ${{ env.IMAGE_REPO }}@${{ needs.build.outputs.digest }}"
          echo "  üè∑Ô∏è SHA: ${{ needs.build.outputs.short-sha }}"